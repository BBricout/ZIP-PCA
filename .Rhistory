init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
# Estimations
B.hat <- out$mStep$beta
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
# config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
config <- PLNPCA_param()$config_optim
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 300
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 200
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 100
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 50
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 20
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 50
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 45
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 45
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
out$pred$A
out$pred$A == inf
is.finite(out$pred$A)
which(is.finite(out$pred$A))
which(is.finite(out$pred$A) == FALSE)
out$pred$A
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 45
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 45
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
# config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 45
out <- Miss.ZIPPCA(Y = data$Y.na, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 45
out <- Miss.ZIPPCA(Y = data$Y, X = data$X, q, params = params, config = config, tolXi = 0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
setwd("~/Documents/ZIP-PCA") # A changer
library(Rcpp)
library(PLNmodels)
library(missForest)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
source("codesBB/FunctionsBB.R")
source("codesBB/UtilsBB.R")
source("Data_create.R")
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
mStep <- init$mStep ; eStep <- init$eStep ;  tolXi <- 1e-04
Belbo_grad <- ElboB(data, params, tolXi)
data$Y.na <- prodNA(data$Y, 0.01)
lb <- c(rep(-Inf, 2*d + q*(p+n)), rep(1e-06, n * q))
config <- PLNPCA_param()$config_optim
config$algorithm <- "MMA" # Par défaut dans config c'est "CCSAQ"
config$lower_bounds <- lb # Si tu veux voir les résultats sans donner la lb il ne faut pas la mettre dans config
config$maxeval <- 45
out <- Miss.ZIPPCA(Y = data$Y, X = data$X, q, params = params, config = config, tolXi = 0)
# Estimations
B.hat <- out$mStep$beta
D.hat <- out$mStep$gamma
C.hat <- out$mStep$C
M.hat <- out$eStep$M
S.hat <- out$eStep$S
XB <- VectorToMatrix(data$X %*% true$mStep$beta, n, p)
XB.hat <- VectorToMatrix(data$X %*% B.hat, n, p)
XD <- VectorToMatrix(data$X %*% true$mStep$gamma, n, p)
XD.hat <- VectorToMatrix(data$X %*% D.hat, n, p)
pred <- exp(XB.hat + M.hat %*% t(C.hat) + 0.5 * (S.hat*S.hat) %*% t(C.hat * C.hat))
Y.logit <- ifelse(data$Y == 0, 0, 1)
par(mfrow=c(2, 3))
plot(out$elboPath, main = "ELBO path")
plot(XD, XD.hat, main = "Estimation de la logistique") ; abline(0,1)
plot(XB, XB.hat, main = "Estimation des régresseurs") ; abline(0,1)
boxplot(VectorToMatrix(XD, n, p) ~ Y.logit, main = "True")
boxplot(VectorToMatrix(XD.hat, n, p) ~ Y.logit, main = "Estimation")
plot(log(1 + data$Y[data$Y !=0]), log(1 + pred[data$Y != 0]), main = "Prediction") ; abline(0,1)
