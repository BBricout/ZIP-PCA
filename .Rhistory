simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
# Fit de Stephane
start_time <- Sys.time()
for(seed in 1:1){
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
load(file=simFileFull)
################ ajustement SR
init <- InitZiPLN(data) #! Fichiers diffÃ©rnets pour miss et pas miss
# vem <- VemZiPLN(data=data, init=init, iterMax=5e3)
# save(init, vem, file=fitFile)
################ ajustement BB
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
################ ajustement SR
}
}
end_time <- Sys.time()
execution_time_real <- end_time - start_time
data$Omega <- ifelse(is.na(data$Y), 0, 1)
data$R <- ifelse(is.na(data$Y), 0, 1)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
init$eStep$xi <- ComputeXi(data=data, mStep=init$mStep, eStep=init$eStep, tolXi=0)
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
Selbo <- ELBO(data = data, mStep = init$mStep, eStep = init$eStep)
SgradS <- matrix(ElboGradVecS(Svec = as.vector(t(init$eStep$S)), data = data, mStep = init$mStep, eStep = init$eStep),n, q, byrow = TRUE)
SgradM <- matrix(ElboGradVecM(Mvec = as.vector(t(init$eStep$M)), data = data, mStep = init$mStep, eStep = init$eStep),n, q, byrow = TRUE)
SgradBeta <- ElboGradBeta(beta = init$mStep$beta, data = data, mStep = init$mStep, eStep = init$eStep)
SgradGamma <- ElboGradGamma(gamma = init$mStep$gamma, data = data, mStep = init$mStep, eStep = init$eStep)
SgradC <- as.matrix(ElboGradC(vecC = as.vector(init$mStep$C), data = data, mStep = init$mStep, eStep = init$eStep),p,q)
ElboBfun.init <- ElboB(data = data, params = params)
ElboBfun.init$elbo5
Belbo <- ElboBfun.init$objective
BgradS <- ElboBfun.init$gradS
BgradM <-ElboBfun.init$gradM
BgradBeta <- ElboBfun.init$gradB
BgradGamma <- ElboBfun.init$gradD
BgradC <- ElboBfun.init$gradC
par(mfrow=c(3, 3))
plot(init$mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(init$mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(init$mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(init$eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(init$eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun.init$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(init$eStep$xi), ElboBfun.init$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$A, ElboBfun.init$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$A, ElboBfun.init$A); abline(0, 1, v=0, h=0)
NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$A
ElboBfun.init$A
dim(ElboBfun.init$A)
dim(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$A)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$A, ElboBfun.init$A); abline(0, 1, v=0, h=0)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
par(mfrow=c(3, 3))
plot(init$mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(init$mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(init$mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(init$eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(init$eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun.init$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(init$eStep$xi), ElboBfun.init$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$A, ElboBfun.init$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$nu, ElboBfun.init$nu); abline(0, 1, v=0, h=0)
par(mfrow=c(3, 3))
plot(BgradBeta, SgradBeta); abline(0, 1, v=0, h=0)
plot(BgradGamma, SgradGamma); abline(0, 1, v=0, h=0)
plot(BgradC, SgradC); abline(0, 1, v=0, h=0)
plot(BgradM, SgradM); abline(0, 1, v=0, h=0)
par(mfrow=c(3, 3))
plot(BgradBeta, SgradBeta); abline(0, 1, v=0, h=0)
plot(BgradGamma, SgradGamma); abline(0, 1, v=0, h=0)
plot(BgradC, SgradC); abline(0, 1, v=0, h=0)
plot(BgradM, SgradM); abline(0, -1, v=0, h=0)
plot(BgradS, SgradS); abline(0, -1, v=0, h=0)
par(mfrow=c(3, 3))
plot(init$mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(init$mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(init$mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(init$eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(init$eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun.init$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(init$eStep$xi), ElboBfun.init$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$A, ElboBfun.init$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$nu, ElboBfun.init$nu); abline(0, 1, v=0, h=0)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
Selbo <- ELBO(data = data, mStep = init$mStep, eStep = init$eStep)
Selbo
ElboBfun.init <- ElboB(data = data, params = params)
ElboBfun.init$objective
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
data$Omega <- matrix(rbinom(n*p, 1, 0.9), n, p)
data$Omega <- matrix(rbinom(n*p, 1, 0.9), n, p)
data$R <- data$Omega
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
init$eStep$xi <- ComputeXi(data=data, mStep=init$mStep, eStep=init$eStep, tolXi=0)
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
Selbo <- ELBO(data = data, mStep = init$mStep, eStep = init$eStep)
SgradS <- matrix(ElboGradVecS(Svec = as.vector(t(init$eStep$S)), data = data, mStep = init$mStep, eStep = init$eStep),n, q, byrow = TRUE)
SgradM <- matrix(ElboGradVecM(Mvec = as.vector(t(init$eStep$M)), data = data, mStep = init$mStep, eStep = init$eStep),n, q, byrow = TRUE)
SgradBeta <- ElboGradBeta(beta = init$mStep$beta, data = data, mStep = init$mStep, eStep = init$eStep)
SgradGamma <- ElboGradGamma(gamma = init$mStep$gamma, data = data, mStep = init$mStep, eStep = init$eStep)
SgradC <- as.matrix(ElboGradC(vecC = as.vector(init$mStep$C), data = data, mStep = init$mStep, eStep = init$eStep),p,q)
ElboBfun.init <- ElboB(data = data, params = params)
ElboBfun.init$objective
Belbo <- ElboBfun.init$objective
BgradS <- ElboBfun.init$gradS
BgradM <-ElboBfun.init$gradM
BgradBeta <- ElboBfun.init$gradB
BgradGamma <- ElboBfun.init$gradD
BgradC <- ElboBfun.init$gradC
par(mfrow=c(3, 3))
plot(init$mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(init$mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(init$mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(init$eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(init$eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun.init$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(init$eStep$xi), ElboBfun.init$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$A, ElboBfun.init$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$nu, ElboBfun.init$nu); abline(0, 1, v=0, h=0)
par(mfrow=c(3, 3))
plot(BgradBeta, SgradBeta); abline(0, 1, v=0, h=0)
plot(BgradGamma, SgradGamma); abline(0, 1, v=0, h=0)
plot(BgradC, SgradC); abline(0, 1, v=0, h=0)
plot(BgradM, SgradM); abline(0, 1, v=0, h=0)
plot(BgradS, SgradS); abline(0, 1, v=0, h=0)
data$Omega <- matrix(rbinom(n*p, 1, 0.9), n, p)
data$Y[which(data$Omega==1)] <- 0
data$R <- data$Omega
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
init$eStep$xi <- ComputeXi(data=data, mStep=init$mStep, eStep=init$eStep, tolXi=0)
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
Selbo <- ELBO(data = data, mStep = init$mStep, eStep = init$eStep)
SgradS <- matrix(ElboGradVecS(Svec = as.vector(t(init$eStep$S)), data = data, mStep = init$mStep, eStep = init$eStep),n, q, byrow = TRUE)
SgradM <- matrix(ElboGradVecM(Mvec = as.vector(t(init$eStep$M)), data = data, mStep = init$mStep, eStep = init$eStep),n, q, byrow = TRUE)
SgradBeta <- ElboGradBeta(beta = init$mStep$beta, data = data, mStep = init$mStep, eStep = init$eStep)
SgradGamma <- ElboGradGamma(gamma = init$mStep$gamma, data = data, mStep = init$mStep, eStep = init$eStep)
SgradC <- as.matrix(ElboGradC(vecC = as.vector(init$mStep$C), data = data, mStep = init$mStep, eStep = init$eStep),p,q)
ElboBfun.init <- ElboB(data = data, params = params)
ElboBfun.init$objective
Belbo <- ElboBfun.init$objective
BgradS <- ElboBfun.init$gradS
BgradM <-ElboBfun.init$gradM
BgradBeta <- ElboBfun.init$gradB
BgradGamma <- ElboBfun.init$gradD
BgradC <- ElboBfun.init$gradC
par(mfrow=c(3, 3))
plot(init$mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(init$mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(init$mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(init$eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(init$eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun.init$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(init$eStep$xi), ElboBfun.init$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$A, ElboBfun.init$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$nu, ElboBfun.init$nu); abline(0, 1, v=0, h=0)
par(mfrow=c(3, 3))
plot(BgradBeta, SgradBeta); abline(0, 1, v=0, h=0)
plot(BgradGamma, SgradGamma); abline(0, 1, v=0, h=0)
plot(BgradC, SgradC); abline(0, 1, v=0, h=0)
plot(BgradM, SgradM); abline(0, 1, v=0, h=0)
plot(BgradS, SgradS); abline(0, 1, v=0, h=0)
data$Omega <- matrix(rbinom(n*p, 1, 0.9), n, p)
data$Y[which(data$Omega==1)] <- 23
data$R <- data$Omega
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
init$eStep$xi <- ComputeXi(data=data, mStep=init$mStep, eStep=init$eStep, tolXi=0)
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
Selbo <- ELBO(data = data, mStep = init$mStep, eStep = init$eStep)
SgradS <- matrix(ElboGradVecS(Svec = as.vector(t(init$eStep$S)), data = data, mStep = init$mStep, eStep = init$eStep),n, q, byrow = TRUE)
SgradM <- matrix(ElboGradVecM(Mvec = as.vector(t(init$eStep$M)), data = data, mStep = init$mStep, eStep = init$eStep),n, q, byrow = TRUE)
SgradBeta <- ElboGradBeta(beta = init$mStep$beta, data = data, mStep = init$mStep, eStep = init$eStep)
SgradGamma <- ElboGradGamma(gamma = init$mStep$gamma, data = data, mStep = init$mStep, eStep = init$eStep)
SgradC <- as.matrix(ElboGradC(vecC = as.vector(init$mStep$C), data = data, mStep = init$mStep, eStep = init$eStep),p,q)
ElboBfun.init <- ElboB(data = data, params = params)
ElboBfun.init$objective
Belbo <- ElboBfun.init$objective
BgradS <- ElboBfun.init$gradS
BgradM <-ElboBfun.init$gradM
BgradBeta <- ElboBfun.init$gradB
BgradGamma <- ElboBfun.init$gradD
BgradC <- ElboBfun.init$gradC
par(mfrow=c(3, 3))
plot(init$mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(init$mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(init$mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(init$eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(init$eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun.init$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(init$eStep$xi), ElboBfun.init$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$A, ElboBfun.init$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=init$mStep, eStep=init$eStep)$nu, ElboBfun.init$nu); abline(0, 1, v=0, h=0)
par(mfrow=c(3, 3))
plot(BgradBeta, SgradBeta); abline(0, 1, v=0, h=0)
plot(BgradGamma, SgradGamma); abline(0, 1, v=0, h=0)
plot(BgradC, SgradC); abline(0, 1, v=0, h=0)
plot(BgradM, SgradM); abline(0, 1, v=0, h=0)
plot(BgradS, SgradS); abline(0, 1, v=0, h=0)
mStep$gamma <- rnorm(p)
mStep <- init$mStep; eStep <- init$eStep
mStep$gamma <- rnorm(p)
mStep$beta <- rnorm(p)
params <- list(B = as.matrix(mStep$beta),
D = as.matrix(mStep$gamma),
C = as.matrix(mStep$C),
M = as.matrix(eStep$M),
S = as.matrix(eStep$S))
eStep$xi <- ComputeXi(data=data, mStep=mStep, eStep=eStep, tolXi=0)
d
mStep$gamma <- rnorm(d); mStep$beta <- rnorm(d)
params <- list(B = as.matrix(mStep$beta),
D = as.matrix(mStep$gamma),
C = as.matrix(mStep$C),
M = as.matrix(eStep$M),
S = as.matrix(eStep$S))
eStep$xi <- ComputeXi(data=data, mStep=mStep, eStep=eStep, tolXi=0)
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
Selbo <- ELBO(data = data, mStep = mStep, eStep = eStep)
SgradS <- matrix(ElboGradVecS(Svec = as.vector(t(eStep$S)), data = data, mStep = mStep, eStep = eStep),n, q, byrow = TRUE)
SgradM <- matrix(ElboGradVecM(Mvec = as.vector(t(eStep$M)), data = data, mStep = mStep, eStep = eStep),n, q, byrow = TRUE)
SgradBeta <- ElboGradBeta(beta = mStep$beta, data = data, mStep = mStep, eStep = eStep)
SgradGamma <- ElboGradGamma(gamma = mStep$gamma, data = data, mStep = mStep, eStep = eStep)
SgradC <- as.matrix(ElboGradC(vecC = as.vector(mStep$C), data = data, mStep = mStep, eStep = eStep),p,q)
ElboBfun <- ElboB(data = data, params = params)
ElboBfun$objective
Belbo <- ElboBfun$objective
BgradS <- ElboBfun$gradS
BgradM <-ElboBfun$gradM
BgradBeta <- ElboBfun$gradB
BgradGamma <- ElboBfun$gradD
BgradC <- ElboBfun$gradC
par(mfrow=c(3, 3))
plot(mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(eStep$xi), ElboBfun$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$A, ElboBfun$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$nu, ElboBfun$nu); abline(0, 1, v=0, h=0)
par(mfrow=c(3, 3))
plot(BgradBeta, SgradBeta); abline(0, 1, v=0, h=0)
plot(BgradGamma, SgradGamma); abline(0, 1, v=0, h=0)
plot(BgradC, SgradC); abline(0, 1, v=0, h=0)
plot(BgradM, SgradM); abline(0, 1, v=0, h=0)
plot(BgradS, SgradS); abline(0, 1, v=0, h=0)
mStep$gamma <- rnorm(d); mStep$beta <- rnorm(d); mStep$C <- matrix(rnorm(p*q), p, q)
params <- list(B = as.matrix(mStep$beta),
D = as.matrix(mStep$gamma),
C = as.matrix(mStep$C),
M = as.matrix(eStep$M),
S = as.matrix(eStep$S))
eStep$xi <- ComputeXi(data=data, mStep=mStep, eStep=eStep, tolXi=0)
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
Selbo <- ELBO(data = data, mStep = mStep, eStep = eStep)
SgradS <- matrix(ElboGradVecS(Svec = as.vector(t(eStep$S)), data = data, mStep = mStep, eStep = eStep),n, q, byrow = TRUE)
SgradM <- matrix(ElboGradVecM(Mvec = as.vector(t(eStep$M)), data = data, mStep = mStep, eStep = eStep),n, q, byrow = TRUE)
SgradBeta <- ElboGradBeta(beta = mStep$beta, data = data, mStep = mStep, eStep = eStep)
SgradGamma <- ElboGradGamma(gamma = mStep$gamma, data = data, mStep = mStep, eStep = eStep)
SgradC <- as.matrix(ElboGradC(vecC = as.vector(mStep$C), data = data, mStep = mStep, eStep = eStep),p,q)
ElboBfun <- ElboB(data = data, params = params)
ElboBfun$objective
Belbo <- ElboBfun$objective
BgradS <- ElboBfun$gradS
BgradM <-ElboBfun$gradM
BgradBeta <- ElboBfun$gradB
BgradGamma <- ElboBfun$gradD
BgradC <- ElboBfun$gradC
par(mfrow=c(3, 3))
plot(mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(eStep$xi), ElboBfun$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$A, ElboBfun$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$nu, ElboBfun$nu); abline(0, 1, v=0, h=0)
par(mfrow=c(3, 3))
plot(BgradBeta, SgradBeta); abline(0, 1, v=0, h=0)
plot(BgradGamma, SgradGamma); abline(0, 1, v=0, h=0)
plot(BgradC, SgradC); abline(0, 1, v=0, h=0)
plot(BgradM, SgradM); abline(0, 1, v=0, h=0)
plot(BgradS, SgradS); abline(0, 1, v=0, h=0)
mStep$gamma <- rnorm(d); mStep$beta <- rnorm(d); mStep$C <- matrix(rnorm(p*q), p, q)
eStep$M <- matrix(rnorm(n*q), n, q); eStep$S <- matrix(exp(rnorm(n*q)), n, q);
params <- list(B = as.matrix(mStep$beta),
D = as.matrix(mStep$gamma),
C = as.matrix(mStep$C),
M = as.matrix(eStep$M),
S = as.matrix(eStep$S))
eStep$xi <- ComputeXi(data=data, mStep=mStep, eStep=eStep, tolXi=0)
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
Selbo <- ELBO(data = data, mStep = mStep, eStep = eStep)
SgradS <- matrix(ElboGradVecS(Svec = as.vector(t(eStep$S)), data = data, mStep = mStep, eStep = eStep),n, q, byrow = TRUE)
SgradM <- matrix(ElboGradVecM(Mvec = as.vector(t(eStep$M)), data = data, mStep = mStep, eStep = eStep),n, q, byrow = TRUE)
SgradBeta <- ElboGradBeta(beta = mStep$beta, data = data, mStep = mStep, eStep = eStep)
SgradGamma <- ElboGradGamma(gamma = mStep$gamma, data = data, mStep = mStep, eStep = eStep)
SgradC <- as.matrix(ElboGradC(vecC = as.vector(mStep$C), data = data, mStep = mStep, eStep = eStep),p,q)
ElboBfun <- ElboB(data = data, params = params)
ElboBfun$objective
Belbo <- ElboBfun$objective
BgradS <- ElboBfun$gradS
BgradM <-ElboBfun$gradM
BgradBeta <- ElboBfun$gradB
BgradGamma <- ElboBfun$gradD
BgradC <- ElboBfun$gradC
par(mfrow=c(3, 3))
plot(mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(eStep$xi), ElboBfun$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$A, ElboBfun$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$nu, ElboBfun$nu); abline(0, 1, v=0, h=0)
par(mfrow=c(3, 3))
plot(BgradBeta, SgradBeta); abline(0, 1, v=0, h=0)
plot(BgradGamma, SgradGamma); abline(0, 1, v=0, h=0)
plot(BgradC, SgradC); abline(0, 1, v=0, h=0)
plot(BgradM, SgradM); abline(0, 1, v=0, h=0)
plot(BgradS, SgradS); abline(0, 1, v=0, h=0)
BgradS
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
set.seed()
?set.seed
set.seed(0); runif(1)
set.seed(0); runif(1)
set.seed(0); runif(1)
set.seed(NULL); runif(1)
set.seed(NULL); runif(1)
set.seed(NULL); runif(1)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
Selbo
ElboBfun$objective
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
set.seed(NULL)
data$Omega <- matrix(rbinom(n*p, 1, 0.9), n, p)
data$Y[which(data$Omega==1)] <- 23
data$R <- data$Omega
mStep <- init$mStep; eStep <- init$eStep
mStep$gamma <- rnorm(d); mStep$beta <- rnorm(d); mStep$C <- matrix(rnorm(p*q), p, q)
eStep$M <- matrix(rnorm(n*q), n, q); eStep$S <- matrix(exp(0.01*rnorm(n*q)), n, q);
params <- list(B = as.matrix(mStep$beta),
D = as.matrix(mStep$gamma),
C = as.matrix(mStep$C),
M = as.matrix(eStep$M),
S = as.matrix(eStep$S))
eStep$xi <- ComputeXi(data=data, mStep=mStep, eStep=eStep, tolXi=0)
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
Selbo <- ELBO(data = data, mStep = mStep, eStep = eStep)
SgradS <- matrix(ElboGradVecS(Svec = as.vector(t(eStep$S)), data = data, mStep = mStep, eStep = eStep),n, q, byrow = TRUE)
SgradM <- matrix(ElboGradVecM(Mvec = as.vector(t(eStep$M)), data = data, mStep = mStep, eStep = eStep),n, q, byrow = TRUE)
SgradBeta <- ElboGradBeta(beta = mStep$beta, data = data, mStep = mStep, eStep = eStep)
SgradGamma <- ElboGradGamma(gamma = mStep$gamma, data = data, mStep = mStep, eStep = eStep)
SgradC <- as.matrix(ElboGradC(vecC = as.vector(mStep$C), data = data, mStep = mStep, eStep = eStep),p,q)
ElboBfun <- ElboB(data = data, params = params)
ElboBfun$objective
Belbo <- ElboBfun$objective
BgradS <- ElboBfun$gradS
BgradM <-ElboBfun$gradM
BgradBeta <- ElboBfun$gradB
BgradGamma <- ElboBfun$gradD
BgradC <- ElboBfun$gradC
par(mfrow=c(3, 3))
plot(mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(eStep$xi), ElboBfun$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$A, ElboBfun$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$nu, ElboBfun$nu); abline(0, 1, v=0, h=0)
par(mfrow=c(3, 3))
plot(BgradBeta, SgradBeta); abline(0, 1, v=0, h=0)
plot(BgradGamma, SgradGamma); abline(0, 1, v=0, h=0)
plot(BgradC, SgradC); abline(0, 1, v=0, h=0)
plot(BgradM, SgradM); abline(0, 1, v=0, h=0)
plot(BgradS, SgradS); abline(0, 1, v=0, h=0)
print(c(Selbo, ElboBfun$objective))
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
data$Omega
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
par(mfrow=c(4, 4))
plot(mStep$beta, params$B); abline(0, 1, v=0, h=0)
plot(mStep$gamma, params$D); abline(0, 1, v=0, h=0)
plot(mStep$C, params$C); abline(0, 1, v=0, h=0)
plot(eStep$M, params$M); abline(0, 1, v=0, h=0)
plot(eStep$S, params$S); abline(0, 1, v=0, h=0)
plot(as.vector(data$Y), ElboBfun$vecY); abline(0, 1, v=0, h=0)
plot(as.vector(eStep$xi), ElboBfun$vecxi); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$A, ElboBfun$A); abline(0, 1, v=0, h=0)
plot(NuMuA(data=data, mStep=mStep, eStep=eStep)$nu, ElboBfun$nu); abline(0, 1, v=0, h=0)
plot(BgradBeta, SgradBeta); abline(0, 1, v=0, h=0)
plot(BgradGamma, SgradGamma); abline(0, 1, v=0, h=0)
plot(BgradC, SgradC); abline(0, 1, v=0, h=0)
plot(BgradM, SgradM); abline(0, 1, v=0, h=0)
plot(BgradS, SgradS); abline(0, 1, v=0, h=0)
print(c(Selbo, ElboBfun$objective))
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
source("~/Bureau/Barbara/ZIP-PCA/compar_Codes_SR_BB.R", echo=TRUE)
