source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLN.R')
source("FunctionsBB.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
#X0 <- NULL
# Same X for all
seedX <- 1; set.seed(seedX)
#X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
load(file=simFileFull)
################ ajustement SR
init <- InitZiPLN(data) #! Fichiers différnets pour miss et pas miss
source('codesSR/Functions/FunctionsZIPLNmiss.R')
################ ajustement SR
init <- InitZiPLN(data) #! Fichiers différnets pour miss et pas miss
q
Y <- data$Y
X <- data$X
out <- Miss.ZIPPCA(Y, X, q)
out <- Miss.ZIPPCA(Y, X, q)
source("FunctionsBB.R")
out <- Miss.ZIPPCA(Y, X, q)
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params)
outB <- Miss.ZIPPCA(data$Y, data$X, q)
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
out$elbo
out$elboPath
source("FunctionsBB.R")
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
names(data)
data$Omega <- matrix(1, n, p)
data$R <- data$Omega
Y <- data$Y
X <- data$X
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
outB$elboPath[[1]]
elbo
outB$elboPath[[1]]
elbo$objective
source("FunctionsBB.R")
source("FunctionsBB.R")
config <- PLNPCA_param()$config_optim
names(config)
config$maxeval <- 3
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
plot(log(1 + data$Y[data$Y != 0]), log(1 + outB$pred$A[data$Y != 0])) ; abline(0,1)
outB$elboPath
outB <- Miss.ZIPPCA(data$Y, data$X, q, config = config)
config <- PLNPCA_param()$config_optim
config$maxeval <- 3
start_timeB <- Sys.time()
source("FunctionsBB.R")
config <- PLNPCA_param()$config_optim
config$maxeval <- 3
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, config = config)
source("FunctionsBB.R")
config <- PLNPCA_param()$config_optim
config$maxeval <- 3
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, config = config)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
outB$elboPath
source("FunctionsBB.R")
source("FunctionsBB.R")
outB <- Miss.ZIPPCA(data$Y, data$X, q, config = config, tolXi = 1e-2)
outB$elboPath
source("FunctionsBB.R")
config <- PLNPCA_param()$config_optim
config$maxeval <- 3
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, config = config, tolXi = 1e-2)
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, config = config, tolXi = 1e-1)
# end_timeB <- Sys.time()
# execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
outB$elboPath
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, config = config, tolXi = 1e-1)
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, config = config, tolXi = 1e-4)
source("FunctionsBB.R")
config <- PLNPCA_param()$config_optim
config$maxeval <- 3
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, config = config, tolXi = 1e-4)
# end_timeB <- Sys.time()
# execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
outB$elboPath
source("FunctionsBB.R")
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, tolXi = 1e-4)
source("FunctionsBB.R")
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, tolXi = 1e-4)
# end_timeB <- Sys.time()
# execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
outB$elboPath
plot(log(1 + data$Y[data$Y != 0]), log(1 + outB$pred$A[data$Y != 0])) ; abline(0,1)
outB$eStep$S
source("FunctionsBB.R")
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, tolXi = 1e-4)
# end_timeB <- Sys.time()
# execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
outB$elboPath
plot(log(1 + data$Y[data$Y != 0]), log(1 + outB$pred$A[data$Y != 0])) ; abline(0,1)
plot(log(1 + data$Y[data$Y != 0]), log(1 + outB$pred$A[data$Y != 0])) ; abline(0,1)
source("FunctionsBB.R")
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, tolXi = 1e-4)
# end_timeB <- Sys.time()
# execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
outB$elboPath
plot(log(1 + data$Y[data$Y != 0]), log(1 + outB$pred$A[data$Y != 0])) ; abline(0,1)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLNmiss.R')
source("FunctionsBB.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
#X0 <- NULL
# Same X for all
seedX <- 1; set.seed(seedX)
#X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
data$Omega <- matrix(1, n, p)
data$R <- data$Omega
data$Omega <- matrix(1, n, p)
names(data)
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
data$Omega <- matrix(1, n, p)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLNmiss.R')
source("FunctionsBB.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
#X0 <- NULL
# Same X for all
seedX <- 1; set.seed(seedX)
#X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
data$Omega <- matrix(1, n, p)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
# Simul
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLNmiss.R')
source("FunctionsBB.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
#X0 <- NULL
# Same X for all
seedX <- 1; set.seed(seedX)
#X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
# Simul
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLN.R')
source('codesSR/Functions/FunctionsZIP.R')
source("FunctionsBB.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
#X0 <- NULL
# Same X for all
seedX <- 1; set.seed(seedX)
#X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
names(data)
data
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLN.R')
source('codesSR/Functions/FunctionsZIP.R')
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
#X0 <- NULL
# Same X for all
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
names(data)
data$Omega <- matrix(1, n, p)
data$R <- data$Omega
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
load(file=simFileFull)
Y <- data$Y
X <- data$X
source("FunctionsBB.R")
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, tolXi = 1e-4)
# end_timeB <- Sys.time()
# execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
names(data)
data$R <- data$Omega
names(data)
data$Omega <- matrix(1, n, p)
data$R <- data$Omega
Y <- data$Y
X <- data$X
source("FunctionsBB.R")
# start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, tolXi = 1e-4)
# end_timeB <- Sys.time()
# execution_time_realB <- end_timeB - start_timeB
elbo <- ElboB(data, params = outB$params.init)
outB$elboPath
plot(log(1 + data$Y[data$Y != 0]), log(1 + outB$pred$A[data$Y != 0])) ; abline(0,1)
plot(outB$params.init$B, outB$mStep$beta)
plot(outB$params.init$B, outB$mStep$beta) ; abline(0,1)
plot(outB$params.init$D, outB$mStep$gamma) ; abline(0,1)
plot(outB$params.init$C, outB$mStep$C) ; abline(0,1)
plot(outB$params.init$M, outB$eStep$M) ; abline(0,1)
plot(outB$params.init$S, outB$eStep$S) ; abline(0,1)
outB$eStep$S
plot(log(1 + data$Y[data$Y != 0]), log(1 + outB$pred$A[data$Y != 0])) ; abline(0,1)
outB$elboPath
config
PLNPCA_param()$config_optim
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLN.R')
source('codesSR/Functions/FunctionsZIP.R')
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
#X0 <- NULL
# Same X for all
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
data$Omega <- matrix(1, n, p)
data$R <- data$Omega
names(data)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
load(file=simFileFull)
Y <- data$Y
X <- data$X
source("FunctionsBB.R")
source("FunctionsBB.R")
source("FunctionsBB.R")
