myPCA <- nlopt_optimize_rank_cov(data, params, config)
sourceCpp("~/Documents/PLNmodels/PLNmodels/src/optim_rank_cov_inter.cpp")
myPCA <- nlopt_optimize_rank_cov(data, params, config)
rm(list=ls())
library(Rcpp)
library(tidyr)
library(dplyr)
library(ggplot2)
library(missForest)
library(PLNmodels)
library(missMDA)
sourceCpp("~/Documents/PLNmodels/PLNmodels/src/optim_rank_cov_inter.cpp")
rm(list=ls())
set.seed("123")
source(file = "~/Documents/PLNmodels/PLNmodels/inst/missing_data/Fonction_PLNPCA_covariables.R")
library(lori)
n = 200 # Nombre d'observation
p = 20 # Nombre de variables
np = n*p
d = 5 # Nombre de covariables sans l'intercept
q = 2 # Dimension de l'espace latent
X <- cbind(rep(1,np),matrix(rnorm(np*d), nrow = np)) # Matrice de covariables n*(d+1)
W <-  matrix(rnorm(n*q), nrow = n) # Matrice de variables latentes n*q
B <- c(0.5, 0.3, 1, 1.5, 1.2, 0.7)
C <- matrix(rnorm(p*q), nrow = p)
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + W %*% t(C)
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
O <- matrix(0, nrow = n, ncol = p)  # n*p
w <- rep(1,n)
lambda1 <- 0.1
lambda2 <- 0.1
res.lori <- lori(Y, X, lambda1, lambda2)
params <- Initialisation(Y, X, q)
data <- list(Y = ifelse(is.na(Y), 0, 1), R = ifelse(is.na(Y), 0, 1), X = X, O = O, w = w)
config <- PLNPCA_param()$config_optim
res.PLNPCA <- Inter.PLNPCA(Y, X, O, w, q, params, config)
plot(Y, res.PLNPCA$Y.hat)
data.frame(
fitted   = as.vector(res.PLNPCA$Y.hat),
observed = as.vector(Y)
) %>%
ggplot(aes(x = observed, y = fitted)) +
geom_point(size = .5, alpha =.25 ) +
scale_x_log10(limits = c(1,1000)) +
scale_y_log10(limits = c(1,1000)) +
theme_bw() + annotation_logticks()
library(missForest)
summary(Y)
C <- C/sqrt(C)
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + W %*% t(C)
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
C
C <- C/p
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + W %*% t(C)
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
C <- matrix(rnorm(p*q), nrow = p)
C <- C/p
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + W %*% t(C)
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
max(Y)
min(Y)
params <- Initialisation(Y, X, q)
data <- list(Y = ifelse(is.na(Y), 0, 1), R = ifelse(is.na(Y), 0, 1), X = X, O = O, w = w)
config <- PLNPCA_param()$config_optim
res.PLNPCA <- Inter.PLNPCA(Y, X, O, w, q, params, config)
plot(Y, res.PLNPCA$Y.hat)
data.frame(
fitted   = as.vector(res.PLNPCA$Y.hat),
observed = as.vector(Y)
) %>%
ggplot(aes(x = observed, y = fitted)) +
geom_point(size = .5, alpha =.25 ) +
scale_x_log10(limits = c(1,1000)) +
scale_y_log10(limits = c(1,1000)) +
theme_bw() + annotation_logticks()
res.PLNPCA$estim$B
n = 500 # Nombre d'observation
p = 20 # Nombre de variables
np = n*p
d = 5 # Nombre de covariables sans l'intercept
q = 2 # Dimension de l'espace latent
X <- cbind(rep(1,np),matrix(rnorm(np*d), nrow = np)) # Matrice de covariables n*(d+1)
W <-  matrix(rnorm(n*q), nrow = n) # Matrice de variables latentes n*q
B <- c(0.5, 0.3, 1, 1.5, 1.2, 0.7)
C <- matrix(rnorm(p*q), nrow = p)
C <- C/p
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + W %*% t(C)
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
O <- matrix(0, nrow = n, ncol = p)  # n*p
w <- rep(1,n)
print(max(Y))
C <- scale(C)
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + W %*% t(C)
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
print(max(Y))
C <- C/n
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + W %*% t(C)
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
print(max(Y))
C <- C/sqrt(max(C)-min(C))
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + W %*% t(C)
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
print(max(Y))
C <- C/(max(C)-min(C))
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + W %*% t(C)
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
print(max(Y))
C <- matrix(rnorm(p*q), nrow = p)
C
Z <- XB + (W %*% t(C))/n
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
Z <- XB + (W %*% t(C))/sqrt(max(W %*% t(C)) - min(W %*% t(C)))
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
print(max(Y))
O <- matrix(0, nrow = n, ncol = p)  # n*p
w <- rep(1,n)
params <- Initialisation(Y, X, q)
data <- list(Y = ifelse(is.na(Y), 0, 1), R = ifelse(is.na(Y), 0, 1), X = X, O = O, w = w)
config <- PLNPCA_param()$config_optim
res.PLNPCA <- Inter.PLNPCA(Y, X, O, w, q, params, config)
plot(Y, res.PLNPCA$Y.hat)
data.frame(
fitted   = as.vector(res.PLNPCA$Y.hat),
observed = as.vector(Y)
) %>%
ggplot(aes(x = observed, y = fitted)) +
geom_point(size = .5, alpha =.25 ) +
scale_x_log10(limits = c(1,1000)) +
scale_y_log10(limits = c(1,1000)) +
theme_bw() + annotation_logticks()
res.PLNPCA$estim$B
C <- matrix(rnorm(p*q), nrow = p)
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + (W %*% t(C))
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
print(max(Y))
C <- C/sqrt(p)
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + (W %*% t(C))
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
print(max(Y))
C <- C/sqrt(2*p)
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + (W %*% t(C))
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
print(max(Y))
O <- matrix(0, nrow = n, ncol = p)  # n*p
w <- rep(1,n)
params <- Initialisation(Y, X, q)
data <- list(Y = ifelse(is.na(Y), 0, 1), R = ifelse(is.na(Y), 0, 1), X = X, O = O, w = w)
config <- PLNPCA_param()$config_optim
res.PLNPCA <- Inter.PLNPCA(Y, X, O, w, q, params, config)
plot(C, res.PLNPCA$estim$C)
C.hat <- res.PLNPCA$estim$C
plot(t(C)%*%C, t(C.hat)%*%C.hat)
t(C)%*%C
plot(C%*%t(C), C.hat%*%t(C.hat))
plot(C%*%t(C), C.hat%*%t(C.hat)); abline(0,1)
n = 5000 # Nombre d'observation
p = 20 # Nombre de variables
np = n*p
d = 5 # Nombre de covariables sans l'intercept
q = 2 # Dimension de l'espace latent
X <- cbind(rep(1,np),matrix(rnorm(np*d), nrow = np)) # Matrice de covariables n*(d+1)
W <-  matrix(rnorm(n*q), nrow = n) # Matrice de variables latentes n*q
B <- c(0.5, 0.3, 1, 1.5, 1.2, 0.7)
C <- matrix(rnorm(p*q), nrow = p)
C <- C/sqrt(2*p)
XB <- VectorToMatrix(X%*%B, n, p)
Z <- XB + (W %*% t(C))
# Z <- scale(Z)
Lambda <- exp(Z)
Y <- matrix(rpois(n*p, lambda = c(Lambda)), nrow = n) # Matrice de comptage
print(max(Y))
O <- matrix(0, nrow = n, ncol = p)  # n*p
w <- rep(1,n)
params <- Initialisation(Y, X, q)
data <- list(Y = ifelse(is.na(Y), 0, 1), R = ifelse(is.na(Y), 0, 1), X = X, O = O, w = w)
config <- PLNPCA_param()$config_optim
res.PLNPCA <- Inter.PLNPCA(Y, X, O, w, q, params, config)
C.hat <- res.PLNPCA$estim$C
plot(C%*%t(C), C.hat%*%t(C.hat)); abline(0,1)
rm(list=ls())
1+1
#--------------------Libraries-----------------------
source(file = "Fonctions/Fonction_PLNPCA_covariables.R")
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
X0 <- NULL
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
getwd()
setwd("~/Documents/ZIP-PCA")
simDir <- '../simBB/'
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
# seed <- .Random.seed
source('CodesSR/Functions/FunctionsUtils.R')
source('CodesSR/Functions/FunctionsZIPLNmiss.R')
simDir <- '../simBB/'
getwd()
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
# seed <- .Random.seed
source('CodesSR/Functions/FunctionsUtils.R')
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLNmiss.R')
simDir <- '../simBB/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
X0 <- NULL
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
simDir <- 'simBB/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
X0 <- NULL
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
simDir <- 'SimBB/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
X0 <- NULL
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
setwd("~/Documents/ZIP-PCA/codesSR")
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(bizicount); library(pscl)
source('Functions/FunctionsUtils.R')
source('Functions/FunctionsZIP.R')
source('Functions/FunctionsZIPLNmiss.R')
source('Functions/FunctionsZIPLNpost.R')
source('Functions/FunctionsZIPLNmissVec.R')
dataDir <- '../data/'
resDir <- '../resultsSR/'
vecDir <- '../resultsSRvec/'
# Data
dataName <- 'Souchet'
dataName <- 'Colvert'
obs <- 0.5; dataName <- paste0(dataName, '-obs', round(100*obs))
load(paste0(dataDir, dataName, '.Rdata'))
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
getxd()
getwd()
setwd("~/Documents/ZIP-PCA")
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLN.R')
source('codesSR/Functions/FunctionsZIP.R')
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
#X0 <- NULL
# Same X for all
seedX <- 1; set.seed(seedX)
#X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
for(seed in 1:1){
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
load(file=simFileFull)
################ ajustement SR
init <- InitZiPLN(data) #! Fichiers différnets pour miss et pas miss
vem <- VemZiPLN(data=data, init=init, iterMax=5e3)
save(init, vem, file=fitFile)
################ ajustement BB
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
################ ajustement SR
}
}
start_time <- Sys.time()
for(seed in 1:1){
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
load(file=simFileFull)
################ ajustement SR
init <- InitZiPLN(data) #! Fichiers différnets pour miss et pas miss
vem <- VemZiPLN(data=data, init=init, iterMax=5e3)
save(init, vem, file=fitFile)
################ ajustement BB
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
################ ajustement SR
}
}
start_time <- Sys.time()
for(seed in 1:1){
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
load(file=simFileFull)
################ ajustement SR
init <- InitZiPLN(data) #! Fichiers différnets pour miss et pas miss
vem <- VemZiPLN(data=data, init=init, iterMax=5e3)
# save(init, vem, file=fitFile)
################ ajustement BB
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
################ ajustement SR
}
}
end_time <- Sys.time()
execution_time_real <- end_time - start_time
execution_time_cpu <- proc.time() - ptm
execution_time_real
