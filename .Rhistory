plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep
Belbo_grad <- ElboB(data, params, tolXi)
Selbo <- ELBO(data=data, mStep=mStep, eStep=eStep)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source("FunctionsBB.R")
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLN.R")
source("codesSR/Functions/FunctionsZIPLN.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
data$Omega <- ifelse(is.na(data$Y), 0, 1)
data$R <- data$Omega
config <- PLNPCA_param()$config_optim ; tolXi <- 1e-04
# config$algorithm <- "MMA"
init <- InitZiPLN(data)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep
Belbo_grad <- ElboB(data, params, tolXi)
Selbo <- ELBO(data=data, mStep=mStep, eStep=eStep)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradBeta <- ElboGradBeta(beta=mStep$beta, data=data, mStep=mStep, eStep=eStep)
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmiss.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
data$Omega <- ifelse(is.na(data$Y), 0, 1)
data$R <- data$Omega
config <- PLNPCA_param()$config_optim ; tolXi <- 1e-04
# config$algorithm <- "MMA"
init <- InitZiPLN(data)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
# config$algorithm <- "MMA"
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep
Belbo_grad <- ElboB(data, params, tolXi)
Selbo <- ELBO(data=data, mStep=mStep, eStep=eStep)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradBeta <- ElboGradBeta(beta=mStep$beta, data=data, mStep=mStep, eStep=eStep)
source("codesSR/Functions/FunctionsZIPLN.R")
source("codesSR/Functions/FunctionsZIPLNVec.R")
miss
miss
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source("FunctionsBB.R")
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
data$Omega <- ifelse(is.na(data$Y), 0, 1)
data$R <- data$Omega
config <- PLNPCA_param()$config_optim ; tolXi <- 1e-04
# config$algorithm <- "MMA"
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep
Belbo_grad <- ElboB(data, params, tolXi)
Selbo <- ELBO(data=data, mStep=mStep, eStep=eStep)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradBeta <- ElboGradBeta(beta=mStep$beta, data=data, mStep=mStep, eStep=eStep)
SgradGamma <- ElboGradGamma(gamma=mStep$gamma, data=data, mStep=mStep, eStep=eStep)
SgradC <- as.matrix(ElboGradC(vecC=as.vector(mStep$C), data=data, mStep=mStep, eStep=eStep),p,q)
Belbo_grad ; Selbo
Belbo_grad$objective ; Selbo
plot(Belbo_grad$gradB, SgradBeta) ; abline(0,1)
plot(init$eStep$xi, Belbo_grad$xi)
plot(init$eStep$xi, Belbo_grad$xi) ; abline(0,1)
Belbo_grad$xi
tolXi
plot(init$eStep$xi, Belbo_grad$xi) ; abline(0,1)
Belbo_grad$xi
Belbo_grad <- ElboB(data, params, tolXi = 0)
Selbo <- ELBO(data=data, mStep=mStep, eStep=eStep)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradBeta <- ElboGradBeta(beta=mStep$beta, data=data, mStep=mStep, eStep=eStep)
SgradGamma <- ElboGradGamma(gamma=mStep$gamma, data=data, mStep=mStep, eStep=eStep)
SgradC <- as.matrix(ElboGradC(vecC=as.vector(mStep$C), data=data, mStep=mStep, eStep=eStep),p,q)
Belbo_grad$objective ; Selbo
plot(init$eStep$xi, Belbo_grad$xi) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep
Belbo_grad <- ElboB(data, params, tolXi = 0)
Selbo <- ELBO(data=data, mStep=mStep, eStep=eStep)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradBeta <- ElboGradBeta(beta=mStep$beta, data=data, mStep=mStep, eStep=eStep)
SgradGamma <- ElboGradGamma(gamma=mStep$gamma, data=data, mStep=mStep, eStep=eStep)
SgradC <- as.matrix(ElboGradC(vecC=as.vector(mStep$C), data=data, mStep=mStep, eStep=eStep),p,q)
Belbo_grad$objective ; Selbo
plot(init$eStep$xi, Belbo_grad$xi) ; abline(0,1)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source("FunctionsBB.R")
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
data$Omega <- ifelse(is.na(data$Y), 0, 1)
data$R <- data$Omega
config <- PLNPCA_param()$config_optim ; tolXi <- 1e-04
# config$algorithm <- "MMA"
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source("FunctionsBB.R")
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
data$Omega <- ifelse(is.na(data$Y), 0, 1)
data$R <- data$Omega
config <- PLNPCA_param()$config_optim ; tolXi <- 1e-04
# config$algorithm <- "MMA"
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep
Belbo_grad <- ElboB(data, params, tolXi = 0)
Selbo <- ELBO(data=data, mStep=mStep, eStep=eStep)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradBeta <- ElboGradBeta(beta=mStep$beta, data=data, mStep=mStep, eStep=eStep)
SgradGamma <- ElboGradGamma(gamma=mStep$gamma, data=data, mStep=mStep, eStep=eStep)
SgradC <- as.matrix(ElboGradC(vecC=as.vector(mStep$C), data=data, mStep=mStep, eStep=eStep),p,q)
Belbo_grad$objective ; Selbo
plot(init$eStep$xi, Belbo_grad$xi) ; abline(0,1)
Belbo_grad <- ElboB(data, params, tolXi)
Selbo <- ELBO(data=data, mStep=mStep, eStep=eStep)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradBeta <- ElboGradBeta(beta=mStep$beta, data=data, mStep=mStep, eStep=eStep)
SgradGamma <- ElboGradGamma(gamma=mStep$gamma, data=data, mStep=mStep, eStep=eStep)
SgradC <- as.matrix(ElboGradC(vecC=as.vector(mStep$C), data=data, mStep=mStep, eStep=eStep),p,q)
Belbo_grad$objective ; Selbo
plot(init$eStep$xi, Belbo_grad$xi) ; abline(0,1)
plot(Belbo_grad$gradB, SgradBeta) ; abline(0,1)
plot(Belbo_grad$gradD, SgradGamma) ; abline(0,1)
plot(Belbo_grad$gradB, SgradBeta) ; abline(0,1)
plot(Belbo_grad$gradD, SgradGamma) ; abline(0,1)
plot(Belbo_grad$gradC, SgradC) ; abline(0,1)
plot(Belbo_grad$gradM, SgradM) ; abline(0,1)
plot(Belbo_grad$gradS, SgradS) ; abline(0,1)
gradS
Belbo_grad$gradS
out_ref <- nlopt_optimize_ZIP(data, params, config, tolXi)
out_ref$objective_values[length(out_ref$objective_values)]
plot(out_ref$objective_values)
out_ref$objective_values
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source("FunctionsBB.R")
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
data$Omega <- ifelse(is.na(data$Y), 0, 1)
source("FunctionsBB.R")
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
data$Omega <- ifelse(is.na(data$Y), 0, 1)
data$R <- data$Omega
config <- PLNPCA_param()$config_optim ; tolXi <- 1e-04
# config$algorithm <- "MMA"
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep
Belbo_grad <- ElboB(data, params, tolXi)
Selbo <- ELBO(data=data, mStep=mStep, eStep=eStep)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradBeta <- ElboGradBeta(beta=mStep$beta, data=data, mStep=mStep, eStep=eStep)
SgradGamma <- ElboGradGamma(gamma=mStep$gamma, data=data, mStep=mStep, eStep=eStep)
SgradC <- as.matrix(ElboGradC(vecC=as.vector(mStep$C), data=data, mStep=mStep, eStep=eStep),p,q)
Belbo_grad$objective ; Selbo
plot(init$eStep$xi, Belbo_grad$xi) ; abline(0,1)
plot(init$eStep$xi, Belbo_grad$xi) ; abline(0,1)
plot(Belbo_grad$gradB, SgradBeta) ; abline(0,1)
plot(Belbo_grad$gradD, SgradGamma) ; abline(0,1)
plot(Belbo_grad$gradC, SgradC) ; abline(0,1)
plot(Belbo_grad$gradM, SgradM) ; abline(0,1)
plot(Belbo_grad$gradS, SgradS) ; abline(0,1)
out_ref <- nlopt_optimize_ZIP(data, params, config, tolXi)
out_ref <- nlopt_optimize_ZIP(data, params, config)
out_ref$objective_values[length(out_ref$objective_values)]
plot(out_ref$objective_values)
out_ref$objective_values[length(out_ref$objective_values)]
plot(out_ref$objective_values)
source("FunctionsBB.R")
out_ref <- nlopt_optimize_ZIP(data, params, config)
out_ref$objective_values[length(out_ref$objective_values)]
plot(out_ref$objective_values)
source("FunctionsBB.R")
out_ref <- nlopt_optimize_ZIP(data, params, config)
Miss.ZIPPCA(Y = data$Y, X = data$X, q)
res <- Miss.ZIPPCA(Y = data$Y, X = data$X, q)
source("FunctionsBB.R")
res <- Miss.ZIPPCA(Y = data$Y, X = data$X, q)
names(res)
res$elbo
out_ref$elbo
out_ref$objective_values[length(out_ref$objective_values)]
res <- Miss.ZIPPCA(Y = data$Y, X = data$X, q, params = params)
out_ref <- nlopt_optimize_ZIP(data, params, config)
res$elbo
config <- PLNPCA_param()$config_optim ; tolXi <- 1e-04
config$algorithm <- "MMA"
res <- Miss.ZIPPCA(Y = data$Y, X = data$X, q, params = params, config = config)
res$elbo
plot(res$elboPath)
plot(res$elboPath
res$elboPath
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source("FunctionsBB.R")
source('codesSR/Functions/FunctionsZIP.R')
source("codesSR/Functions/FunctionsZIPLNmiss.R")
source("codesSR/Functions/FunctionsZIPLNmissVec.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
data$Omega <- ifelse(is.na(data$Y), 0, 1)
data$R <- data$Omega
config <- PLNPCA_param()$config_optim ; tolXi <- 1e-04
config$algorithm <- "MMA"
init <- InitZiPLN(data,q)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
plot(init$mStep$beta, params$B) ; abline(0,1)
plot(init$mStep$gamma, params$D) ; abline(0,1)
plot(init$mStep$C, params$C) ; abline(0,1)
plot(init$eStep$M, params$M) ; abline(0,1)
plot(init$eStep$S, params$S) ; abline(0,1)
mStep <- init$mStep ; eStep <- init$eStep
Belbo_grad <- ElboB(data, params, tolXi)
Selbo <- ELBO(data=data, mStep=mStep, eStep=eStep)
SgradS <- matrix(ElboGradVecS(Svec=as.vector(t(eStep$S)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradM <- matrix(ElboGradVecM(Mvec=as.vector(t(eStep$M)), data=data, mStep=mStep, eStep=eStep),n, q, byrow=TRUE)
SgradBeta <- ElboGradBeta(beta=mStep$beta, data=data, mStep=mStep, eStep=eStep)
SgradGamma <- ElboGradGamma(gamma=mStep$gamma, data=data, mStep=mStep, eStep=eStep)
SgradC <- as.matrix(ElboGradC(vecC=as.vector(mStep$C), data=data, mStep=mStep, eStep=eStep),p,q)
Belbo_grad$objective ; Selbo
plot(init$eStep$xi, Belbo_grad$xi) ; abline(0,1)
plot(Belbo_grad$gradB, SgradBeta) ; abline(0,1)
plot(Belbo_grad$gradD, SgradGamma) ; abline(0,1)
plot(Belbo_grad$gradC, SgradC) ; abline(0,1)
plot(Belbo_grad$gradM, SgradM) ; abline(0,1)
plot(Belbo_grad$gradS, SgradS) ; abline(0,1)
res <- Miss.ZIPPCA(Y = data$Y, X = data$X, q, params = params, config = config)
# # vem <- VemZiPLN(data=data, init=init, iterMax=5e3)
#
# range(out_ref$S)
#
plot(true$mStep$gamma, out_ref$D) ; abline(0,1)
out_ref <- Miss.ZIPPCA(Y = data$Y, X = data$X, q, params = params, config = config)
# # vem <- VemZiPLN(data=data, init=init, iterMax=5e3)
#
# range(out_ref$S)
#
plot(true$mStep$gamma, out_ref$D) ; abline(0,1)
XD <- data$X%*%true$mStep$gamma
XD_ref <- data$X%*%out_ref$D
plot(XD, XD_ref) ; abline(0,1)
# # vem <- VemZiPLN(data=data, init=init, iterMax=5e3)
#
# range(out_ref$S)
#
plot(true$mStep$gamma, out_ref$D) ; abline(0,1)
XD <- data$X%*%true$mStep$gamma
XD_ref <- data$X%*%out_ref$mStep$gamma
plot(XD, XD_ref) ; abline(0,1)
XB <- data$X%*%true$mStep$beta
XB_ref <- data$X%*%out_ref$mStep$B
XB_ref <- data$X%*%out_ref$mStep$beta
XB_vem <- data$X%*%vem$mStep$betabetaXB_vem <- data$X%*%vem$mStep$beta
plot(XB_ref, XB) ; abline(0,1)
