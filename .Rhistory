################ ajustement BB
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
################ ajustement SR
}
}
start_time <- Sys.time()
for(seed in 1:1){
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
load(file=simFileFull)
################ ajustement SR
init <- InitZiPLN(data) #! Fichiers diffÃ©rnets pour miss et pas miss
vem <- VemZiPLN(data=data, init=init, iterMax=5e3)
# save(init, vem, file=fitFile)
################ ajustement BB
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
################ ajustement SR
}
}
end_time <- Sys.time()
execution_time_real <- end_time - start_time
execution_time_real
init
names(init)
names(init$mStep)
names(init$eStep)
params <- list(B = init$mStep$beta, D = init$mStep$gamma, C = init$mStep$C,
M = init$eStep$M, S = init$eStep$S)
Yall
true$Yall
true$latent$Yall
data
names(data)
dataB <- list(Y = data$Y, R = ifelse(is.na(Y), 0, 1), X = data$X)
dataB <- list(Y = data$Y, R = ifelse(is.na(Y), 0, 1), X = data$X)
dataB <- list(Y = data$Y, R = ifelse(is.na(data$Y), 0, 1), X = data$X)
sourceCpp("src/optim_rank_ZIP.cpp")
library(Rcpp)
sourceCpp("src/optim_rank_ZIP.cpp")
library(PLNmodels)
config <- PLNPCA_param()$config_optim
start_timeB <- Sys.time()
outB <- nlopt_optimize_ZIP(dataB, params, config)
dim(data$matrix)
dim(data$X)
n
p
d
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(nit$eStep$S))
dataB <- list(Y = as.matrix(data$Y),
R = ifelse(is.na(data$Y), 0, 1),
X = as.matrix(data$X))
config <- PLNPCA_param()$config_optim
sourceCpp("src/optim_rank_ZIP.cpp")
start_timeB <- Sys.time()
outB <- nlopt_optimize_ZIP(dataB, params, config)
n
p
q
d
dim(data$Y)
dim(init$mStep$beta)
init$mStep$beta
as.matrix(init$mStep$beta)
as.matrix(init$mStep$beta, nrow = 1)
matrix(init$mStep$beta, nrow = 1)
params <- list(B = matrix(init$mStep$beta, nrow = 1),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(nit$eStep$S))
dataB <- list(Y = as.matrix(data$Y),
R = ifelse(is.na(data$Y), 0, 1),
X = as.matrix(data$X))
config <- PLNPCA_param()$config_optim
sourceCpp("src/optim_rank_ZIP.cpp")
start_timeB <- Sys.time()
outB <- nlopt_optimize_ZIP(dataB, params, config)
as.matrix(init$mStep$gamma)
params <- list(B = matrix(init$mStep$beta, nrow = 1),
D = matrix(init$mStep$gamma, nrow = 1),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(nit$eStep$S))
dataB <- list(Y = as.matrix(data$Y),
R = ifelse(is.na(data$Y), 0, 1),
X = as.matrix(data$X))
config <- PLNPCA_param()$config_optim
start_timeB <- Sys.time()
outB <- nlopt_optimize_ZIP(dataB, params, config)
as.matrix(init$mStep$C)
n
p
q
dim(as.matrix(init$mStep$C))
dim(as.matrix(init$eStep$M))
dim(as.matrix(init$eStep$S))
ifelse(is.na(data$Y), 0, 1)
dataB <- list(Y = as.matrix(data$Y),
R = as.matrix(ifelse(is.na(data$Y), 0, 1)),
X = as.matrix(data$X))
config <- PLNPCA_param()$config_optim
start_timeB <- Sys.time()
outB <- nlopt_optimize_ZIP(dataB, params, config)
params <- list(B = matrix(init$mStep$beta, nrow = 1),
D = matrix(init$mStep$gamma, nrow = 1),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(nit$eStep$S))
params <- list(B = matrix(init$mStep$beta, nrow = 1),
D = matrix(init$mStep$gamma, nrow = 1),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
dataB <- list(Y = as.matrix(data$Y),
R = as.matrix(ifelse(is.na(data$Y), 0, 1)),
X = as.matrix(data$X))
config <- PLNPCA_param()$config_optim
sourceCpp("src/optim_rank_ZIP.cpp")
outB <- nlopt_optimize_ZIP(dataB, params, config)
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
dataB <- list(Y = as.matrix(data$Y),
R = as.matrix(ifelse(is.na(data$Y), 0, 1)),
X = as.matrix(data$X))
config <- PLNPCA_param()$config_optim
sourceCpp("src/optim_rank_ZIP.cpp")
outB <- nlopt_optimize_ZIP(dataB, params, config)
start_timeB <- Sys.time()
outB <- nlopt_optimize_ZIP(dataB, params, config)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
execution_time_realB
execution_time_real
outB$B
vem$mStep$beta
outB$D - vem$mStep$gamma
outB$C - vem$mStep$C
names(vem)
names(outB)
mStep
vem$mStep
eStep <- list(M = outB$M, S = outB$S)
names(vem)
outB$monitoring
vem$elboPath
outB$objective_values
mStep <- list(gamma = outB$D, beta = outB$B, C = outB$C)
eStep <- list(M = outB$M, S = outB$S)
pred <- outB$A
iter <- outB$monitoring$iterations
elboPath <- outB$objective_values
elbo <- outB$objective_values[length(outB$objective_values)]
source("FunctionsBB.R")
q
outB <- Miss.ZIPPCA(Y, X, q, paramrs = params)
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(Y, X, q, params = params)
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params)
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
execution_time_realB
plot(log(1 + data$Y), log(1 + vem$pred)) ; abline(0,1)
vem$pred
names(vem$pred)
plot(log(1 + data$Y), log(1 + vem$pred$Yhat)) ; abline(0,1)
plot(log(1 + data$Y), log(1 + vem$pred$A)) ; abline(0,1)
plot(log(1 + data$Y), log(1 + outB$pred)) ; abline(0,1)
outB$pred
outB
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
execution_time_realB
plot(log(1 + data$Y), log(1 + outB$pred)) ; abline(0,1)
outB$pred
outB
source("Functions")
source("FunctionsBB.R")
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
plot(log(1 + data$Y), log(1 + vem$pred$A)) ; abline(0,1)
plot(log(1 + data$Y), log(1 + outB$pred)) ; abline(0,1)
plot(log(1 + data$Y), log(1 + vem$pred$A)) ; abline(0,1)
plot(log(1 + data$Y), log(1 + outB$pred)) ; abline(0,1)
source("FunctionsBB.R")
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
plot(log(1 + data$Y), log(1 + vem$pred$A)) ; abline(0,1)
plot(log(1 + data$Y), log(1 + outB$pred)) ; abline(0,1)
plot(log(1 + data$Y), log(1 + outB$pred$A)) ; abline(0,1)
boxplot(outB$pred$xi[Y == 0])
boxplot(outB$pred$xi[data$Y == 0])
par(mfrow=c(1, 2))
boxplot(outB$pred$xi[data$Y == 0])
boxplot(outB$pred$xi[data$Y != 0])
vem$pred
names(vem$pred)
source("FunctionsBB.R")
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
plot(log(1 + data$Y), log(1 + vem$pred$A)) ; abline(0,1)
plot(log(1 + data$Y), log(1 + outB$pred$A)) ; abline(0,1)
boxplot(vem$pred$nu[data$Y == 0])
boxplot(outB$pred$nu[data$Y != 0])
par(mfrow=c(1, 2))
boxplot(outB$pred$nu[data$Y == 0])
boxplot(outB$pred$nu[data$Y != 0])
boxplot(vem$pred$nu[data$Y == 0])
boxplot(vem$pred$nu[data$Y != 0])
par(mfrow=c(1, 2))
boxplot(outB$pred$nu[data$Y == 0])
boxplot(outB$pred$nu[data$Y != 0])
par(mfrow=c(1, 1))
boxplot(vem$pred$nu[data$Y == 0], vem$pred$nu[data$Y != 0])
boxplot(outB$pred$nu[data$Y == 0], outB$pred$nu[data$Y != 0])
plot(log(1 + data$Y), log(1 + vem$pred$A)) ; abline(0,1)
plot(log(1 + data$Y), log(1 + outB$pred$A)) ; abline(0,1)
plot(log(1 + data$Y[Y != 0]), log(1 + vem$pred$A[Y != 0])) ; abline(0,1)
plot(log(1 + data$Y[data$Y != 0]), log(1 + vem$pred$A[data$Y != 0])) ; abline(0,1)
plot(log(1 + data$Y[data$Y != 0]), log(1 + outB$pred$A[data$Y != 0])) ; abline(0,1)
boxplot(vem$pred$nu[data$Y == 0], vem$pred$nu[data$Y != 0])
boxplot(outB$pred$nu[data$Y == 0], outB$pred$nu[data$Y != 0])
(0,1)
plot(log(1 + data$Y[data$Y != 0]), log(1 + vem$pred$A[data$Y != 0])) ; abline(0,1)
plot(log(1 + data$Y[data$Y != 0]), log(1 + outB$pred$A[data$Y != 0])) ; abline(0,1)
plot(log(1 + vem$pred$A[data$Y != 0]), log(1 + outB$pred$A[data$Y != 0])) ; abline(0,1)
init$B
init$beta
outB$mStep$beta - init$mStep$beta
vem$mStep$beta - init$mStep$beta
vem$elbo
outB$elbo
execution_time_real
execution_time_realB
source("codesSR/FunctionsZIPLN.R")
source("codesSR/Functions/FunctionsZIPLN.R")
ElboB <- ELBO(data = data, mStep = outB$mStep, eStep = outB$eStep)
ElboB
outB$elbo
ElboSfun <- ELBO(data = data, mStep = outB$mStep, eStep = outB$eStep)
ElboSfun - outB$elbo
source("FunctionsBB.R")
source("FunctionsBB.R")
source("FunctionsBB.R")
source("FunctionsBB.R")
source("FunctionsBB.R")
outB$eStep$S
outB$eStep$M - init$eStep$M
source("FunctionsBB.R")
source("codesSR/Functions/FunctionsZIPLN.R")
source("FunctionsBB.R")
source("FunctionsBB.R")
ElboSfun <- ELBOSophie(data = data, mStep = outB$mStep, eStep = outB$eStep)
paramsfin <- list(B = outB$mStep$beta,
D = outB$mStep$gamma,
C = outB$mStep$C,
M = outB$eStep$M,
S = outB$eStep$S)
ElboBfum <- elbo(data = data, params = paramsfin)
ElboBfum <- ElboB(data = data, params = paramsfin)
source("FunctionsBB.R")
ElboBfum <- ElboB(data = data, params = paramsfin)
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLN.R')
source('codesSR/Functions/FunctionsZIP.R')
source("FunctionsBB.R")
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
#X0 <- NULL
# Same X for all
seedX <- 1; set.seed(seedX)
#X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
# Simul
for(seed in 1:10){
set.seed(seed)
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
if(!file.exists(simFileFull)){
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
obsTresh <- matrix(runif(n*p), n, p)
data <- list(X=sim$X, Y=sim$Y, obsTresh=obsTresh, ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
save(data, true, file=simFileFull)
for(oo in 1:obsNb){
obs <- obsList[oo]
simParms <- paste0(simParmsFull, '-obs', 100*obs)
simName <- paste0(baseSimName, simParms)
simFile <- paste0(simDir, simName, '.Rdata')
Omega <- 1*(obsTresh <= obs)
data <- list(X=sim$X, Y=sim$Y, Omega=Omega, ij=sim$ij, logFactY=lgamma(sim$Y+1))
save(data, file=simFile)
}
}
}
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
load(file=simFileFull)
################ ajustement SR
init <- InitZiPLN(data) #! Fichiers diffÃ©rnets pour miss et pas miss
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
dataB <- list(Y = as.matrix(data$Y),
R = as.matrix(ifelse(is.na(data$Y), 0, 1)),
X = as.matrix(data$X))
config <- PLNPCA_param()$config_optim
source("FunctionsBB.R")
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
data = data
mStep = outB$mStep
eStep = outB$eStep
ElboSfun <- ELBOSophie(data = data, mStep = outB$mStep, eStep = outB$eStep)
paramsfin <- list(B = outB$mStep$beta,
D = outB$mStep$gamma,
C = outB$mStep$C,
M = outB$eStep$M,
S = outB$eStep$S)
ElboBfum <- ElboB(data = data, params = paramsfin)
setwd("~/Documents/ZIP-PCA")
source("FunctionsBB.R")
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
data = data
mStep = outB$mStep
eStep = outB$eStep
ElboSfun <- ELBOSophie(data = data, mStep = outB$mStep, eStep = outB$eStep)
paramsfin <- list(B = outB$mStep$beta,
D = outB$mStep$gamma,
C = outB$mStep$C,
M = outB$eStep$M,
S = outB$eStep$S)
ElboBfum <- ElboB(data = data, params = paramsfin)
sourceCpp("src/optim_rank_ZIP.cpp")
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfum <- ElboB(data = data, params = paramsfin)
ElboBfum <- ElboB(data = dataB, params = paramsfin)
ElboBfun <- ElboB(data = dataB, params = paramsfin)
ElboSfun
ElboBfun
paramsfin$S
log(paramsfin$S)
ElboSfun.init <- ELBOSophie(data = data, mStep = init$mStep, eStep = init$eStep)
ElboBfun.init <- ElboB(data = dataB, params = params)
ElboSfun.init
ElboBfun.init
params$S
params$M
params$S - log(params$S)
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfun.init <- ElboB(data = dataB, params = params)
sourceCpp("src/optim_rank_ZIP.cpp")
ElboSfun.init <- ELBOSophie(data = data, mStep = init$mStep, eStep = init$eStep)
ElboBfun.init <- ElboB(data = dataB, params = params)
ElboBfun.init
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfun.init <- ElboB(data = dataB, params = params)
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfun.init <- ElboB(data = dataB, params = params)
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfun.init <- ElboB(data = dataB, params = params)
sourceCpp("src/optim_rank_ZIP.cpp")
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfun.init <- ElboB(data = dataB, params = params)
ElboBfun.init
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfun.init <- ElboB(data = dataB, params = params)
ElboBfun.init
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfun.init <- ElboB(data = dataB, params = params)
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfun.init <- ElboB(data = dataB, params = params)
S
params$S
sum(params$S)
1/2 * params$S
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfun.init <- ElboB(data = dataB, params = params)
sourceCpp("src/optim_rank_ZIP.cpp")
ElboBfun.init <- ElboB(data = dataB, params = params)
ElboBfun.init
ElboSfun.init <- ELBOSophie(data = data, mStep = init$mStep, eStep = init$eStep)
ElboBfun.init <- unlist(ElboB(data = dataB, params = params))
ElboSfun.init
ElboBfun.init
sourceCpp("src/optim_rank_ZIP.cpp")
ElboSfun.init <- ELBOSophie(data = data, mStep = init$mStep, eStep = init$eStep)
ElboBfun.init <- unlist(ElboB(data = dataB, params = params))
ElboSfun.init
ElboBfun.init
sourceCpp("src/optim_rank_ZIP.cpp")
ElboSfun.init <- ELBOSophie(data = data, mStep = init$mStep, eStep = init$eStep)
ElboBfun.init <- unlist(ElboB(data = dataB, params = params))
rm(list=ls()); par(mfrow=c(1, 1), pch=20); palette('R3')
library(Rcpp)
library(PLNmodels)
# seed <- .Random.seed
source('codesSR/Functions/FunctionsUtils.R')
source('codesSR/Functions/FunctionsZIPLN.R')
source('codesSR/Functions/FunctionsZIP.R')
simDir <- 'SimulationsBB/datasim/'
# Parms: many small sims
n <- 100; d <- 5; p <- 10; q <- 2
baseSimName <- 'ZiPLNsim'
seedList <- 1:10; seedNb <- length(seedList)
obsList <- c(1, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5); obsNb <- length(obsList)
#X0 <- NULL
# Same X for all
seedX <- 1; set.seed(seedX)
X0 <- matrix(rnorm(n*p*d), n*p, d); X0[, 1] <- 1;
baseSimName <- paste0(baseSimName, '-sameX', seedX)
#############################################################
set.seed(1)
seed = 1
simParmsFull <- paste0('-n', n, '-d', d, '-p', p, '-q', q, '-seed', seed)
simNameFull <- paste0(baseSimName, simParmsFull)
simFileFull <- paste0(simDir, simNameFull, '-noMiss.Rdata')
sim <- SimZiPLN(n=n, p=p, d=d, q=q, X=X0)
data <- list(X=sim$X, Y=sim$Y,  ij=sim$ij, logFactY=lgamma(sim$Y+1))
true <- list(mStep=list(gamma=sim$gamma, beta=sim$beta, C=sim$C),
eStep=list(M=sim$W, S=matrix(1e-4, n, q), xi=matrix(plogis(sim$X%*%sim$gamma), n, p)),
latent=list(U=sim$U, W=sim$W, Z=sim$Z, Yall=sim$Yall))
#############################################################
################ INIT ajustement SR
init <- InitZiPLN(data) #! Fichiers diffÃ©rnets pour miss et pas miss
params_init <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
data <- list(Y = as.matrix(data$Y),
R = as.matrix(ifelse(is.na(data$Y), 0, 1)),
X = as.matrix(data$X),ij=sim$ij,  logFactY=lgamma(sim$Y+1))
config <- PLNPCA_param()$config_optim
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params_init)
source("FunctionsBB.R")
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params_init)
params = c(outB$mStep,outB$eStep)
params$B <- params$beta
params$D <- params$gamma
eStep = outB$eStep
mStep = outB$mStep
ELBOSophie(data = data, mStep,  eStep )
cbind(ELBOSophie(data = data, mStep,  eStep), unlist(elbo(data,params)))
cbind(ELBOSophie(data = data, mStep,  eStep), unlist(ElboB(data,params)))
source("FunctionsBB.R")
cbind(ELBOSophie(data = data, mStep,  eStep), unlist(ElboB(data,params)))
params <- list(B = as.matrix(init$mStep$beta),
D = as.matrix(init$mStep$gamma),
C = as.matrix(init$mStep$C),
M = as.matrix(init$eStep$M),
S = as.matrix(init$eStep$S))
dataB <- list(Y = as.matrix(data$Y),
R = as.matrix(ifelse(is.na(data$Y), 0, 1)),
X = as.matrix(data$X))
config <- PLNPCA_param()$config_optim
source("FunctionsBB.R")
start_timeB <- Sys.time()
outB <- Miss.ZIPPCA(data$Y, data$X, q, params = params)
end_timeB <- Sys.time()
execution_time_realB <- end_timeB - start_timeB
outB$eStep$S
